{"version":3,"sources":["index.js"],"names":["speakText","text","pitch","rate","volume","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","selectedOption","voiceSelect","selectedOptions","getAttribute","i","voices","length","name","voice","speak","WordSpeller","showSettings","selectedWordIndex","words","sayWord","index","answerWord","answer","document","getElementById","value","correct","toLowerCase","every","w","src","pandaGifs","data","Math","floor","random","images","original","url","classList","add","setWords","init","console","log","map","join","getPandaGifs","trim","split","answerInputs","querySelectorAll","fetch","then","response","json","synth","populateVoiceList","getVoices","selectedIndex","innerHTML","findEnglishIdx","option","createElement","textContent","lang","indexOf","default","setAttribute","appendChild","undefined","onvoiceschanged"],"mappings":"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","file":"wordspeller.2475ce46.js","sourceRoot":"..","sourcesContent":["window.WordSpeller = function () {\r\n  return {\r\n    showSettings: false,\r\n    selectedWordIndex: 3,\r\n    words: [\r\n      // { text: \"cat\", correct: false },\r\n      // { text: \"dog\", correct: false },\r\n      // { text: \"apple\", correct: false },\r\n    ],\r\n    sayWord(index, rate = 1) {\r\n      speakText(this.words[index].text, 1, rate, 1);\r\n    },\r\n    answerWord(index) {\r\n      let answer = document.getElementById(\"answer_\" + index).value;\r\n      this.words[index].correct =\r\n        this.words[index].text.toLowerCase() === answer.toLowerCase();\r\n      let gotAllWords = this.words.every((w) => w.correct == true);\r\n      if (gotAllWords == true) {\r\n        document.getElementById(\"greatJob-image\").src =\r\n          pandaGifs.data[Math.floor(Math.random() * 50)].images.original.url;\r\n        document.getElementById(\"greatJob\").classList.add(\"is-active\");\r\n        this.setWords();\r\n      }\r\n    },\r\n    init() {\r\n      console.log(\"init()\", this.words.length);\r\n      document.getElementById(\"inputWords\").value = this.words\r\n        .map((w) => w.text)\r\n        .join(\"\\n\");\r\n\r\n      this.getPandaGifs();\r\n    },\r\n    setWords() {\r\n      this.words = [];\r\n      let words = document\r\n        .getElementById(\"inputWords\")\r\n        .value.trim()\r\n        .split(\"\\n\");\r\n      console.log(words);\r\n      if (words.length > 0 && words[0] != \"\") {\r\n        this.words = words.map((w) => {\r\n          return { text: w, correct: false };\r\n        });\r\n      }\r\n      let answerInputs = document.querySelectorAll(\"[id^='answer_']\");\r\n      for (const i of answerInputs) {\r\n        i.value = \"\";\r\n      }\r\n    },\r\n    pandaGifs: [],\r\n    getPandaGifs() {\r\n      fetch(\"panda.json\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(data);\r\n          pandaGifs = data;\r\n        });\r\n    },\r\n  };\r\n};\r\n\r\nfunction speakText(text, pitch, rate, volume) {\r\n  // stop any speaking in progress\r\n  window.speechSynthesis.cancel();\r\n\r\n  // create new utterance with all the properties\r\n  const utterance = new SpeechSynthesisUtterance(text);\r\n  utterance.pitch = pitch;\r\n  utterance.rate = rate;\r\n  utterance.volume = volume;\r\n\r\n  var selectedOption = voiceSelect.selectedOptions[0].getAttribute(\"data-name\");\r\n  for (var i = 0; i < voices.length; i++) {\r\n    if (voices[i].name === selectedOption) {\r\n      utterance.voice = voices[i];\r\n    }\r\n  }\r\n\r\n  // speak that utterance\r\n  window.speechSynthesis.speak(utterance);\r\n}\r\n\r\nvar synth = window.speechSynthesis;\r\nvar voices = [];\r\nvar voiceSelect = document.getElementById(\"voiceSelect\");\r\n\r\nfunction populateVoiceList() {\r\n  // voices = synth.getVoices().sort(function (a, b) {\r\n  //     const aname = a.name.toUpperCase(), bname = b.name.toUpperCase();\r\n  //     if (aname < bname) return -1;\r\n  //     else if (aname == bname) return 0;\r\n  //     else return +1;\r\n  // });\r\n  voices = synth.getVoices();\r\n  var selectedIndex =\r\n    voiceSelect.selectedIndex < 0 ? 0 : voiceSelect.selectedIndex;\r\n  voiceSelect.innerHTML = \"\";\r\n\r\n  let findEnglishIdx = 0;\r\n  for (i = 0; i < voices.length; i++) {\r\n    var option = document.createElement(\"option\");\r\n    option.textContent = voices[i].name + \" (\" + voices[i].lang + \")\";\r\n\r\n    if (option.textContent.indexOf(\"en-US\") > -1) {\r\n      findEnglishIdx = i;\r\n    }\r\n\r\n    if (voices[i].default) {\r\n      option.textContent += \" -- DEFAULT\";\r\n    }\r\n\r\n    option.setAttribute(\"data-lang\", voices[i].lang);\r\n    option.setAttribute(\"data-name\", voices[i].name);\r\n    voiceSelect.appendChild(option);\r\n  }\r\n  voiceSelect.selectedIndex = findEnglishIdx;\r\n}\r\n\r\npopulateVoiceList();\r\nif (\r\n  typeof speechSynthesis !== \"undefined\" &&\r\n  speechSynthesis.onvoiceschanged !== undefined\r\n) {\r\n  window.speechSynthesis.onvoiceschanged = populateVoiceList;\r\n}\r\n"]}